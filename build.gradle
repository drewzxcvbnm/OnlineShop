plugins {
    id 'org.springframework.boot' version '2.7.12'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
}

group 'com.online.shop.application'
version '1.2'

sourceCompatibility = 17
targetCompatibility = 17

jacoco {
    toolVersion = "0.8.6"
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'javax.validation:validation-api'
    testImplementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.springframework.security:spring-security-test'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity5"
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
}

compileJava {
    options.compilerArgs << '-Amapstruct.defaultComponentModel=spring'
}


test {
    useJUnit()
    testLogging {
        events "passed", "skipped", "failed" //, "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        showStandardStreams = false
    }

}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    checkstyleTest.enabled = false

    classpath = files()
}

pmd {
    toolVersion = "6.22.0"
    ignoreFailures = false
    ruleSetFiles = files("${project.rootDir}/config/pmd/pmd-ruleset.xml")
    ruleSets = []
    pmdTest.enabled = false
    consoleOutput = true
    incrementalAnalysis = true
}

task runJar(type: JavaExec) {
    main = "-jar";
    args jar.getArchiveFile().get()
}

checkstyle {
    checkstyleTest.enabled = false
}

